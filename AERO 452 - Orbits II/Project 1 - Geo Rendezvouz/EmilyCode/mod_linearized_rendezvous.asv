function dydt = mod_linearized_rendezvous(time, state, muearth, n)
% dstate = derivative of state
% Use for propogating position and velocity vectors over time for 
% linearized rendezvous.
% ***** Target and chaser must be close!!!!
% ***** For chaser in elliptical orbit
% ***** Plug into ode45 for propogation over time
%% Inputs
%       state = [Chaser relative position; 
%                Chaser relative velocity; 
%                Target position (ECI);
%                Target velocity (ECI)]
%       time = time for propogation [seconds]

% Find magnitude of position vect
r = norm([state(7) state(8) state(9)]);

% Extract rvect and vvect
rvect = state(7:9);
vvect = state(10:12);
h = norm(cross(rvect,vvect));

dydt = zeros(12,1);

% Chief/target
dydt(7) = state(10);
dydt(8) = state(11);
dydt(9) = state(12);
dydt(10) = -muearth*state(7)/r^3;
dydt(11) = -muearth*state(8)/r^3;
dydt(12) = -muearth*state(9)/r^3;

% Deputy/chaser
dydt(1) = state(4);
dydt(2) = state(5);
dydt(3) = state(6);
dydt(4) = 3*n^2*state(1)+2*n*state(5);
dydt(5) = -2*n*state(4);
dydt(6) = -n^2*state(3);
% dydt(4) = ((2*muearth/r^3)+(h^2/r^4))*state(1)-2*(dot(vvect,rvect))*(h/r^4)*state(2)+2*h/r^2*state(5);
% dydt(5) = ((-muearth/r^3)+(h^2/r^4))*state(2)+2*(dot(vvect,rvect))*(h/r^4)*state(1)-2*(h/r^2)*state(4);
% dydt(6) = -(muearth/r^3)*state(3);



end