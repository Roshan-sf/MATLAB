close all;              % clears all
clear all;              % clears workspace
clc;                    % clears command line

mode = 1;
n_pts = 100;
plots = 'no';

[freq1] = beamvibe(mode, n_pts, plots);
disp(['Frequency for first mode: ', num2str(freq1), ' Hz']);

mode = 2;
n_pts = 100;
plots = 'no';

[freq2] = beamvibe(mode, n_pts, plots);
disp(['Frequency for second mode: ', num2str(freq2), ' Hz']);

function [freq] = beamvibe(mode, n_pts, plots)
    % Constants and initial setup
    L = pi; % Length of the beam
    dx = L / (n_pts - 1); % Spatial step size
    C = -9.3979e-6; % Given constant
    Q = -0.2; % Given stability factor
    dt = sqrt(Q * C * dx^4); % Initial time step
    t_end = 0.1; % Simulation end time
    time_steps = ceil(t_end / dt); % Number of time steps

    % Initialize W
    W = zeros(n_pts, time_steps);

    % Initial conditions
    x = linspace(0, L, n_pts);
    W(:,1) = sin(mode * x); % Initial deflection
    %W(:,2) = W(:,1); % Initial velocity = 0

    % Arrays to store the time history of central point for frequency analysis
    W_center = zeros(1, time_steps);
    %time = zeros(1, time_steps);
    time_steps2 = time_steps + 1;
    time = linspace(0,t_end,time_steps2);

    % Time stepping loop
    for j = 2:time_steps
        for i = 3:n_pts-2
            W(i,j+1) = Q * (W(i+2,j) - 4*W(i+1,j) + 6*W(i,j) - 4*W(i-1,j) + W(i-2,j)) + 2*W(i,j) - W(i,j-1);
        end

        % Apply boundary conditions
        W(1,j+1) = 0; % Pin at the start
        W(n_pts,j+1) = 0; % Pin at the end

        % Store the central point displacement for frequency analysis
        W_center(j) = W(ceil(n_pts/2), j);
        time(j) = j * dt;

        % Plot the beam if required
        if strcmp(plots, 'yes')
            plot(x, W(:,j));
            ylim([-1, 1]);
            title(['Time: ', num2str(j * dt), ' seconds']);
            drawnow;
        end
    end

    % X axis crossing method to calculate frequency
    crossings = 0;
    for j = 2:time_steps-1
        if W_center(j-1) * W_center(j) < 0
            crossings = crossings + 1;
        end
    end

    % Frequency calculation
    period = 2 * t_end / crossings;
    freq = 1 / period;

    % Plot the displacement of the central point over time
    if strcmp(plots, 'yes')
        figure;
        plot(time, W_center);
        title('Displacement of the Central Point Over Time');
        xlabel('Time (seconds)');
        ylabel('Displacement');
        grid on;
    end
end

%time vector should be time steps + 1 (from 0 to t) linspace(0,t,timesteps
%+1)

%Substitute last 2 equations seperately into eq 4 to get all 4 eqs

%\


