%Roshan Jaiswal-Ferri
%Section - 01 
%Aero 351: Space Debris Removal - 11/13/24

%% Workspace Prep

format long     %Allows for more accurate decimals
close all;      %Clears all
clear all;      %Clears Workspace
clc;            %Clears Command Window

%% PART 1: Global Vars

mu = 398600;
Rearth = 6378;

%% PART 2: Reading TLE Data

%Satellite Selection:
%Leo 1: COURIER 1B
%Leo 2: COURIER 1B ROCKET
%Meo: H2SAT (HEINRICH HERTZ)  
%Geo: GALAXY 14 (G-14)


% Read TLE data using the new readTLE function
tleL1 = readTLE("TLE_Data\LEO1.txt");
tleL2 = readTLE("TLE_Data\LEO2.txt");
tleM = readTLE("TLE_Data\MEO.txt");
tleG = readTLE("TLE_Data\GEO.txt");

% Extract inclination
incL1 = tleL1.inclination;
incL2 = tleL2.inclination;
incM = tleM.inclination;
incG = tleG.inclination;

% Extract eccentricity
eccL1 = tleL1.eccentricity;
eccL2 = tleL2.eccentricity;
eccM = tleM.eccentricity;
eccG = tleG.eccentricity;

% Extract Right Ascension of Ascending Node (RAAN)
RAANL1 = tleL1.rightAscension;
RAANL2 = tleL2.rightAscension;
RAANM = tleM.rightAscension;
RAANG = tleG.rightAscension;

% Extract argument of periapsis
ArgPL1 = tleL1.argumentOfPerigee;
ArgPL2 = tleL2.argumentOfPerigee;
ArgPM = tleM.argumentOfPerigee;
ArgPG = tleG.argumentOfPerigee;

%Me given in rev/day:
MeL1 = tleL1.meanAnomaly*((2*pi)/86400); %Me in rad/s
MeL2 = tleL2.meanAnomaly*((2*pi)/86400);
MeM = tleM.meanAnomaly*((2*pi)/86400);
MeG = tleG.meanAnomaly*((2*pi)/86400);

%true anomaly
nuL1 = MetoNu(MeL1,eccL1);
nuL2 = MetoNu(MeL2,eccL2);
nuM = MetoNu(MeM,eccM);
nuG = MetoNu(MeG,eccG);

%semi major axis
aL1 = Me2a(tleL1.meanMotion,mu);
aL2 = Me2a(tleL2.meanMotion,mu);
aM = Me2a(tleM.meanMotion,mu);
aG = Me2a(tleG.meanMotion,mu);

%Juilian Date
JDtimeL1 = juliandate(2024,11,18,18,01,04); 
JDtimeL2 = juliandate(2024,11,17,23,04,40);
JDtimeM = juliandate(2024,11,13,02,18,12);
JDtimeG = juliandate(2024,11,13,11,24,12);
JDStart = juliandate(2024,11,22,0,0,0); %start nov-22-2024 at midnight

%% PART 3: Finding State Vectors (R & V) & Propogation

%INPUT AND OUTPUT IN METERS!!!!!!
[R,V] = keplerian2ijk(aL1*1000,eccL1,incL1,RAANL1,ArgPL1,nuL1);
R = R./1000;
V = V./1000;
%DEBUG: 
% [~,a,e] = rv2coes(R,V,mu,Rearth);

[~,~,~,~,~,~,~,p] = rv2coes(R,V,mu,Rearth);

PropTime = (JDStart-JDtimeL1)+(5*p); %seconds
timespan = [0, PropTime];
JDCurrent = PropTime;
state = [R, V]; 
%INPUTS MUST BE IN THAT ORDER UNTIL OPTIONS
options = odeset('RelTol',1e-8,'AbsTol',1e-8);

[~,Orbit1] = ode45(@twobodymotion,timespan,state,options,mu);

RL1 = [Orbit1(end,1),Orbit1(end,2),Orbit1(end,3)];
VL1 = [Orbit1(end,4),Orbit1(end,5),Orbit1(end,6)];


%% PART 4: First Transfer

[~,~,~,~,~,~,~,p,t,~,Ra] = rv2coes(RL1,VL1,mu,Rearth);

tA = (p/2)-t; %time to apogee
JDCurrent = JDCurrent + tA;

%propogation for apogee
state = [RL1, VL1];
tspan = [0, tA];
[~,Orbit1A] = ode45(@twobodymotion,tspan,state,options,mu);

RL1A = [Orbit1A(end,1),Orbit1A(end,2),Orbit1A(end,3)]; %R&V at apogee
VL1A = [Orbit1A(end,4),Orbit1A(end,5),Orbit1A(end,6)];

rT = norm(Orbit1A(end,1:3)); %R target

%Circ Burn
v = sqrt(mu/rT);
dVc = v-norm(VL1A); %delta v from circ burn

uV = VL1A/norm(VL1A); %unit vector
dVd = dVc*uV; %delta V with direction
VL1C = VL1A+dVd; %new velocity vector after adding velocity
RL1C = RL1A;

hL1C = cross(RL1C,VL1C); %h of Leo 1 circ orbit

[~,a,e,nuL12,~,~,w,~] = rv2coes(RL1A,VL1C,mu,Rearth); %e confirms we are circ!

%INC + RAAN Change
dR = abs(RAANL1-RAANL2);
alpha = acosd(cosd(incL1)*cosd(incL2)+sind(incL1)*sind(incL2)*cosd(dR));
dVincR = 2*norm(VL1)*sind((alpha/2));

dVt = dVincR + dVc; %delta V total


[R2,V2] = keplerian2ijk(a*1000,e,incL2,RAANL2,w,rad2deg(nuL12));
R2 = R2./1000; %random RV of new orbit with inc + RAAN
V2 = V2./1000;

hL12_2 = cross(R2,V2); %h of ht orbit

nodeVect12 = cross(hL1C,hL12_2);
nodeVect12U = nodeVect12/norm(nodeVect12); %node line unit vector
RL12B = nodeVect12U*norm(RL1C); %position of inc raan burn (node line)
V12u = cross(hL12_2,RL12B)/norm(cross(hL12_2,RL12B)); %unit vector vel
VL12B = norm(VL1C)*V12u; %velocity at position of inc raan burn (after)

%finding time of inc raan burn for correct propagation time
theta = acos((dot(RL12B,RL1A))/... %in radians!!
    (norm(RL1A)*norm(RL12B))); %Angle between apoapse & inc raan change 
S = theta*norm(RL1A); %arclength
tS = S/norm(VL1C); %in seconds (Time from circ burn till node line/inc burn)
JDCurrent = JDCurrent + tS;


%% Propogation of Orbit 1 to 2

JDL2 = abs(JDtimeL1-JDtimeL2); 
dtL = 5*p;
Ttrnsfr = PropTime+dtL+JDL2;
tspan = [0,Ttrnsfr];
tspan12 = [0, tS];
[R22,V22] = keplerian2ijk(aL2*1000,eccL2,incL2,RAANL2,ArgPL2,nuL2);
R22 = R22./1000;
V22 = V22./1000;
stateL22 = [R22, V22];
stateL2 = [RL1A, VL1C];

% %prop of leo orbit 2 (rocket body) -trying to match this-
% [timeNewL22,Orbit2] = ode45(@twobodymotion,tspan,stateL22,options,mu);
% RL22 = [Orbit2(end,1),Orbit2(end,2),Orbit2(end,3)];
% VL22 = [Orbit2(end,4),Orbit2(end,5),Orbit2(end,6)];

%prop of circularized burn
[timeNewL2,Trans12_1] = ode45(@twobodymotion,tspan12,stateL2,options,mu);
RL2 = [Trans12_1(end,1),Trans12_1(end,2),Trans12_1(end,3)];
VL2JD = [Trans12_1(end,4),Trans12_1(end,5),Trans12_1(end,6)];

%-------------------------

%% Matching ecc Orbit 1 to 2 for HT

[~,~,~,~,~,~,~,p2,t2,~,Ra2] = rv2coes(R22,V22,mu,Rearth);

tA2 = (p2/2)-t2; %time to apogee orbit 2

state2 = [R22, V22];
tspan2 = [0, tA2];
[~,Orbit2A] = ode45(@twobodymotion,tspan2,state2,options,mu);

R2A = [Orbit2A(end,1),Orbit2A(end,2),Orbit2A(end,3)]; %R&V at apogee orb 2
V2A = [Orbit2A(end,4),Orbit2A(end,5),Orbit2A(end,6)];

[RL1CP,VL1CP] = keplerian2ijk(a*1000,e,incL2,RAANL2,ArgPL2,0);
RL1CP = RL1CP./1000;
VL1CP = VL1CP./1000; %R & V vectors of circ orbit at periapse (opp of orb 2 apogee)

theta2 = acos((dot(RL12B,RL1CP))/... %in radians!!
    (norm(RL1CP)*norm(RL12B))); %Angle between inc raan change & peri of orb 2
SHB1 = theta2*norm(RL1CP); %arclength
tSHB1 = SHB1/norm(VL1C); %in seconds (Time from inc burn to ht burn 1)
JDCurrent = JDCurrent + tSHB1;

% Propogation of second transfer orbit (inc raan change)
tspan12_2 = [0, tSHB1];
state12_2 = [RL12B, VL12B];

[timeNew12_2,Trans12_2] = ode45(@twobodymotion,tspan12_2,state12_2,options,mu);
R12_2 = [Trans12_2(end,1),Trans12_2(end,2),Trans12_2(end,3)];
V12_2 = [Trans12_2(end,4),Trans12_2(end,5),Trans12_2(end,6)];


%Transfer Orbit Coes (HT)
ecc12 = (norm(RL1C)-norm(R2A))/(norm(RL1C)+norm(R2A));
aH1 = norm(R2A)/(1-ecc12);

[RH1_1,VH1_1] = keplerian2ijk(aH1*1000,ecc12,incL2,RAANL2,ArgPL2,0);
RH1_1 = RH1_1./1000;
VH1_1 = VH1_1./1000;

dVH1B1 = abs(norm(VH1_1) - norm(VL1CP)); %delta v from ht burn 1
dVt = dVt + dVH1B1;

[~,~,~,~,~,~,~,p3] = rv2coes(RH1_1,VH1_1,mu,Rearth);

tH = p3/2; %time of ht orbit
JDCurrent = JDCurrent + tH;

stateH = [RH1_1,VH1_1];
tspanH = [0,tH];
[timeNew,HT1] = ode45(@twobodymotion,tspanH,stateH,options,mu);

RH1_2 = [HT1(end,1),HT1(end,2),HT1(end,3)]; %R&V at apogee orb 2
VH1_2 = [HT1(end,4),HT1(end,5),HT1(end,6)];

dVH1B2 = abs(norm(VH1_2)-norm(V2A));
dVt = dVt + dVH1B2;



%% ORBIT 2 Propogation For Rendezvous

tspanJD = [0, JDCurrent];
%prop of leo orbit 2 (rocket body) ending when ht arrives
[timeNewL22,Orbit2] = ode45(@twobodymotion,tspanJD,stateL22,options,mu);
RL2JD = [Orbit2(end,1),Orbit2(end,2),Orbit2(end,3)];
VL2JD = [Orbit2(end,4),Orbit2(end,5),Orbit2(end,6)];

[~,~,~,nuL2JD,~,~,~,pL2] = rv2coes(RL2JD,VL2JD,mu,Rearth); %finding nu of rocket b
nuL2JDd = rad2deg(nuL2JD); %rv2coes outputs rads

[~,~,~,nuJD] = rv2coes(RH1_2,VH1_2,mu,Rearth); %finding nu of us
nuJDd = rad2deg(nuJD);

nuDiff = abs(nuJDd-nuL2JDd);
tGap = (nuDiff/360)*pL2; %~22 minutes
pPhase1 = pL2*(1+(tGap/pL2)); %period of phasing orbit
%aPhase1 = ((mu*((pPhase1/2*pi)^2))/1)^(1/3);
aPhase1 = (pPhase1^(2/3)*mu^(1/3))/(2^(2/3)*pi^(2/3));
Rp = norm(RH1_2);
Ra = 2*aPhase1-Rp;
eccP = (Ra-Rp)/(Ra+Rp);

[RP,VP] = keplerian2ijk(aPhase1*1000,eccP,incL2,RAANL2,ArgPL2,360-nuJDd);
RP = RP./1000;
VP = VP./1000;

tspanP = [0,pPhase1];
stateP = [RP,VP];
[~,Phase1] = ode45(@twobodymotion,tspanP,stateP,options,mu);
RP1 = [Phase1(end,1),Phase1(end,2),Phase1(end,3)]; %R&V at end of phase
VP1 = [Phase1(end,4),Phase1(end,5),Phase1(end,6)];



%%

figure('Name', 'Orbit Trajectory');
plot3(0, 0, 0, 'g*', 'MarkerSize', 10); % Earth at the origin
hold on;
plot3(Orbit1(:, 1), Orbit1(:, 2), Orbit1(:, 3), 'b', 'LineWidth', 1.5);
plot3(Trans12_1(:, 1), Trans12_1(:, 2), Trans12_1(:, 3), 'r', 'LineWidth', 1.5);
plot3(Orbit2(:, 1), Orbit2(:, 2), Orbit2(:, 3), 'g', 'LineWidth', 1.5);
plot3(Trans12_1(end,1),Trans12_1(end,2),Trans12_1(end,3), 'r*', 'MarkerSize', 10);
plot3(Orbit1(end,1),Orbit1(end,2),Orbit1(end,3), 'w*', 'MarkerSize', 10); 
plot3(Orbit2(end,1),Orbit2(end,2),Orbit2(end,3), 'g*', 'MarkerSize', 10);
plot3(Orbit1A(end,1),Orbit1A(end,2),Orbit1A(end,3), 'y*', 'MarkerSize', 10);
plot3(Trans12_2(:,1),Trans12_2(:,2),Trans12_2(:,3), 'c', 'LineWidth', 1.5);
plot3(Orbit2A(end,1),Orbit2A(end,2),Orbit2A(end,3), 'r*', 'MarkerSize', 10);
plot3(RL1CP(1),RL1CP(2),RL1CP(3),'yo', 'MarkerSize',10)
plot3(HT1(:, 1), HT1(:, 2), HT1(:, 3), 'r', 'LineWidth', 1.5);
xlabel('X (km)');
ylabel('Y (km)');
zlabel('Z (km)');
grid on;
legend('Earth', 'Orbit 1', 'Transfer Orbit', 'Orbit 2', 'End T', 'End 1', 'End 2', 'Apogee', 'Second T Orbit');
title('Spacecraft Trajectory under Continuous Thrust');

figure('Name', 'Orbit Trajectory Transfers');
plot3(0, 0, 0, 'g*', 'MarkerSize', 10); % Earth at the origin
hold on;
%plot3(Orbit1(:, 1), Orbit1(:, 2), Orbit1(:, 3), 'b', 'LineWidth', 1.5);
plot3(Trans12_1(:, 1), Trans12_1(:, 2), Trans12_1(:, 3), 'r', 'LineWidth', 1.5);
%plot3(Orbit2(:, 1), Orbit2(:, 2), Orbit2(:, 3), 'g', 'LineWidth', 1.5);
plot3(Trans12_1(end,1),Trans12_1(end,2),Trans12_1(end,3), 'r*', 'MarkerSize', 10);
%plot3(Orbit1(end,1),Orbit1(end,2),Orbit1(end,3), 'w*', 'MarkerSize', 10); 
%plot3(Orbit2(end,1),Orbit2(end,2),Orbit2(end,3), 'g*', 'MarkerSize', 10);
%plot3(Orbit1A(end,1),Orbit1A(end,2),Orbit1A(end,3), 'y*', 'MarkerSize', 10);
plot3(Trans12_2(:,1),Trans12_2(:,2),Trans12_2(:,3), 'c', 'LineWidth', 1.5);
plot3(Orbit2A(end,1),Orbit2A(end,2),Orbit2A(end,3), 'r*', 'MarkerSize', 10);
plot3(RL1CP(1),RL1CP(2),RL1CP(3),'yo', 'MarkerSize',10)
plot3(HT1(:, 1), HT1(:, 2), HT1(:, 3), 'r', 'LineWidth', 1.5);
plot3(Phase1(:, 1), Phase1(:, 2), Phase1(:, 3), 'y', 'LineWidth', 1.5);
xlabel('X (km)');
ylabel('Y (km)');
zlabel('Z (km)');
grid on;
legend('Earth', 'Orbit 1', 'Transfer Orbit', 'Orbit 2', 'End T', 'End 1', 'End 2', 'Apogee', 'Second T Orbit');
title('Spacecraft Trajectory under Continuous Thrust');